# -*- coding: utf-8 -*-
"""Transfer_learning_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x50ee1jz4wD0iE2SECX4BO_ggnLIDSBc
"""

### Transfer learning framework for ResNet101 in PyTorch
### Found at: https://github.com/hulman-princeton/Senior_Thesis/main/transfer_learning_cnn.py
### Adapted from: https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html

# Libraries
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import torchvision
from torchvision import datasets, models, transforms
from torchvision.datasets import ImageFolder
from torch.utils.data.sampler import SubsetRandomSampler
from torch.utils.data.dataloader import DataLoader
import torch.backends.cudnn as cudnn

import matplotlib.pyplot as plt
import time
import os
from PIL import Image
from tempfile import TemporaryDirectory

cudnn.benchmark = True
plt.ion()

# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# dictionary of channel means and std. devs. for normalization
datasets = {'ORIGA': {'means': [0.8838386, 0.54816394, 0.26245996], 'stds': [0.0874888, 0.11906112, 0.09120588]},
            'REFUGE': {'means': [0.66341796, 0.43719301, 0.29155903], 'stds': [0.16775985, 0.14277969, 0.09243343]},
            'ACRIMA': {'means': [0.72563578, 0.37745064, 0.09958277], 'stds': [0.09922888, 0.10618329, 0.05055466]},
            'RIM-ONE': {'means': [0.58595025, 0.26142626, 0.14453408], 'stds': [0.11523398, 0.09373888, 0.04623389]},
            'COMBO-1': {'means': [0.74480503, 0.40688095, 0.16887603], 'stds': [0.09887175, 0.10700735, 0.06351543]},
            'COMBO-2': {'means': [0.71806865, 0.4300941, 0.24476887], 'stds': [0.12725383, 0.12211156, 0.08018193]},
            'COMBO-3': {'means': [0.75050978, 0.45117447, 0.22012019], 'stds': [0.12083352, 0.12334915, 0.07821309]},
            'COMBO-4': {'means': [0.66637015, 0.37307097, 0.18786628], 'stds': [0.13073384, 0.11786446, 0.06635228]},
            'FULL': {'means': [0.72008179, 0.41608895, 0.20614389], 'stds': [0.11979813, 0.11787404, 0.07229996]}}

#### ONLY USE THIS SECTION FOR NEW DATASETS ####
# function to calculate mean & std. dev. for each channel of dataset, with PyTorch Tensors as input
def calc_norms(data):
  mean_arr = np.zeros((len(data),3))
  std_arr = np.zeros((len(data),3))
  for i in range(len(data)):
    mean = torch.mean(data[i][0], dim=(1,2))
    std = torch.std(data[i][0], dim=(1,2))
    mean_arr[i] = mean
    std_arr[i] = std
  channel_means = np.mean(mean_arr, axis=0)
  channel_stds = np.mean(std_arr, axis=0)
  return channel_means, channel_stds

dataset = 'FULL'

# load unnormalized training data
train_dir = '/content/drive/MyDrive/ORF 498/' + dataset + '_ROI/train/'
train_data = ImageFolder(train_dir, transforms.Compose([transforms.Resize((224,224)), transforms.ToTensor()]))

# calculate and print channel means and std. devs. (then add to dictionary)
means, stds = calc_norms(train_data)
print("Means: ", means)
print("Std. dev.: ", stds)
### END OF SECTION ###

dataset = 'FULL'

# load data
train_dir = '/content/drive/MyDrive/ORF 498/' + dataset + '_ROI/train/'
test_dir = '/content/drive/MyDrive/ORF 498/' + dataset + '_ROI/test/'
val_dir = '/content/drive/MyDrive/ORF 498/' + dataset + '_ROI/val/'

# resize and normalize for training
train_data = ImageFolder(train_dir, transforms.Compose([transforms.Resize((224,224)), transforms.ToTensor(), transforms.Normalize(mean=datasets[dataset]['means'], std=datasets[dataset]['stds'])]))
val_data = ImageFolder(val_dir, transforms.Compose([transforms.Resize((224,224)), transforms.ToTensor(), transforms.Normalize(mean=datasets[dataset]['means'], std=datasets[dataset]['stds'])]))
test_data = ImageFolder(test_dir, transforms.Compose([transforms.Resize((224,224)), transforms.ToTensor(), transforms.Normalize(mean=datasets[dataset]['means'], std=datasets[dataset]['stds'])]))

# split into batches
batch_size = 32

train_loader = DataLoader(dataset=train_data, batch_size = batch_size, shuffle=True)
val_loader = DataLoader(dataset=val_data, batch_size = batch_size, shuffle=True)
test_loader = DataLoader(dataset=test_data, batch_size = batch_size, shuffle=True)

dataloaders = {'train': train_loader, 'val': val_loader, 'test': test_loader}

# visualize training images (directly from PyTorch tutorial)
def imshow(inp, title=None):
    """Display image for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array(datasets[dataset]['means'])
    std = np.array(datasets[dataset]['stds'])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated

# Get a batch of training data
inputs, classes = next(iter(train_loader))

# Make a grid from batch
out = torchvision.utils.make_grid(inputs)

class_names = ['healthy', 'glaucoma']

imshow(out, title=[class_names[x] for x in classes])

# training step (directly from PyTorch tutorial)
def train_model(model, criterion, optimizer, num_epochs):
    since = time.time()

    # Create a temporary directory to save training checkpoints
    with TemporaryDirectory() as tempdir:
        best_model_params_path = os.path.join(tempdir, 'best_model_params.pt')

        torch.save(model.state_dict(), best_model_params_path)
        best_acc = 0.0

        for epoch in range(num_epochs):
            print(f'Epoch {epoch}/{num_epochs - 1}')
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    model.train()  # Set model to training mode
                else:
                    model.eval()   # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for inputs, labels in dataloaders[phase]:
                    inputs = inputs.to(device)
                    labels = labels.to(device)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    # track history if only in train
                    with torch.set_grad_enabled(phase == 'train'):
                        outputs = model(inputs)
                        _, preds = torch.max(outputs, 1)
                        loss = criterion(outputs, labels)

                        # backward + optimize only if in training phase
                        if phase == 'train':
                            loss.backward()
                            optimizer.step()

                    # statistics
                    running_loss += loss.item() * inputs.size(0)
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / len(dataloaders[phase].dataset)
                epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)

                print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    torch.save(model.state_dict(), best_model_params_path)

            print()

        time_elapsed = time.time() - since
        print(f'Training complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')
        print(f'Best val Acc: {best_acc:4f}')

        # load best model weights
        model.load_state_dict(torch.load(best_model_params_path))
        torch.save(model.state_dict(), '/content/drive/MyDrive/ORF 498/ResNet101.pt')
    return model

# model parameters
num_epochs = 20
num_cls = 2

# load model from PyTorch
model_ft = models.resnet101(weights='DEFAULT')
num_ftrs = model_ft.fc.in_features
# re-initialize final fully-connected layer
model_ft.fc = nn.Linear(num_ftrs, num_cls)

model_ft = model_ft.to(device)

# define loss and optimizer
criterion = nn.CrossEntropyLoss(weight=None)
optimizer_ft = optim.Adam(model_ft.parameters(), lr=0.001, betas=(0.9, 0.999))

# train model
model_ft = train_model(model_ft, criterion, optimizer_ft, num_epochs=num_epochs)
# save state dictionary
torch.save(model_ft.state_dict(), '/content/drive/MyDrive/ORF 498/ResNet101_ORIGA_Nov29.pt')
